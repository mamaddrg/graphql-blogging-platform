type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  bio: String
  createdAt: String!
  updatedAt: String
  posts: [Post!]!
  comments: [Comment!]!
  likes: [Like!]!
}

type Post {
  id: ID!
  title: String!
  content: String!
  published: Boolean!
  authorId: Int!
  createdAt: String!
  updatedAt: String
  author: User!
  comments: [Comment!]!
  likes: [Like!]!
}

type Comment {
  id: ID!
  content: String!
  authorId: Int!
  postId: Int!
  createdAt: String!
  updatedAt: String
  author: User!
  post: Post!
  likes: [Like!]!
}

type Like {
  id: ID!
  userId: Int!
  postId: Int!
  createdAt: String!
  user: User!
  post: Post!
}

type Query {
  users: [User]
  posts: [Post]
  comments: [Comment]
  likes: [Like]
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  createLike(data: CreateLikeInput!): Like!
  login(data: LoginInput): AuthPayload!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  bio: String
}

input CreatePostInput {
  title: String!
  content: String!
  published: Boolean
}

input CreateCommentInput {
  content: String!
  postId: Int!
}

input CreateLikeInput {
  postId: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}